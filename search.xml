<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字节面试拷打</title>
      <link href="/2025/08/04/zi-jie-mian-shi-kao-da/"/>
      <url>/2025/08/04/zi-jie-mian-shi-kao-da/</url>
      
        <content type="html"><![CDATA[<h3 id="一些面试拷打问题，主要来自字节一面"><a href="#一些面试拷打问题，主要来自字节一面" class="headerlink" title="一些面试拷打问题，主要来自字节一面"></a>一些面试拷打问题，主要来自字节一面</h3><ol><li><p>Redis扣减余票成功后宕机了，新的主节点数据存在一部分的不同步，可能导致MySQL的余票数量和Redis不一样，如何解决这个问题</p><blockquote><p>场景：Redis余票60张，A抢票成功剩59张，但此时主节点宕机，从节点显示仍有60张票，会发生超卖问题。</p><ul><li><p>开启AOF&#x3D;always，每次修改立马写入磁盘，但会非常影响性能；</p></li><li><p>启用Redis <strong>min-replicas-to-write</strong>限制，确保至少有1个从节点和主节点保持较高的同步</p></li></ul></blockquote></li><li><p>Redis做库存的预扣减，那什么时候去真正扣减库存？</p><blockquote><p>我们使用 Redis 做库存预扣减，用户点击购买时先通过 Lua 脚本进行原子扣减。如果成功，就将订单信息发送到 Kafka，由后台服务异步消费，执行订单创建和数据库扣减库存操作。如果 <strong>Kafka 消费失败或数据库扣减失败</strong>，就将该消息投递到 <code>rollback-topic</code>，由专门的消费者监听并将库存补偿回 Redis。</p></blockquote></li><li><p>异步生成订单，用户点击下单后就希望跳转支付页面但是Kafka还没有成功创建订单怎么办？</p><blockquote><p>为了兼容 Kafka 异步下单的延迟，同时提升用户体验，我们设计了“订单状态中间态”的机制。用户点击下单时，系统立即生成订单号，并在 Redis 中标记为 <code>PENDING</code> 状态，返回前端用于<strong>长轮询</strong>，挂起请求3s后去查询订单状态。Kafka 后台异步创建订单成功后将状态更新为 <code>CREATED</code>，前端轮询检测到后跳转支付页面。若为<code>FAIL</code>则显示错误重试，仍然为<code>PENDING</code>则由前端退避后重试1~2次。</p></blockquote></li><li><p>Kafka有丢消息的风险，让它去生成订单，它挂了消息丢失怎么办？</p><blockquote><ul><li>通过配置ack确保发送成功，配置最小同步副本数确保分区容错</li><li>Kafka宕机重启后，根据Redis中<code>PENDING</code> 状态的订单去补偿</li></ul></blockquote></li><li><p>RocketMQ延迟订单取消，要是客户在临近取消时间到期时去支付，结果支付成功订单却取消了怎么办？</p><blockquote><p>在执行取消订单的逻辑之前去主动查询数据库的状态，如果是已取消则可以关闭订单，再去主动检查支付渠道的支付状态看看到底有没有支付成功，和数据库的支付状态进行对比并以支付宝的支付状态为准补偿数据库。</p></blockquote></li><li><p>布隆过滤器应该是单实例还是多实例部署，如何去做布隆过滤器的更新？</p><blockquote><p>为了保证一致性与准确性，我采用 <strong>布隆过滤器单实例部署，结合 Redis 分布式存储</strong> 实现共享过滤器。启动多个实例也会共用Redis上的布隆过滤器。<br>对于两个不同业务场景，我采用不同更新策略：</p><ul><li><strong>注册手机号布隆过滤器</strong>：注册成功后立即异步加入布隆过滤器，同时每日定时从数据库全量同步，确保漏加数据被补全。</li><li><strong>节目 ID 布隆过滤器</strong>：由于节目 ID 属于静态数据，采用 <strong>定时任务+全量重建</strong> 的方式，每隔一定时间拉取节目库中的 ID 重建布隆过滤器，确保恶意请求被拦截。</li></ul><p><strong>多实例去获取分布式锁，确保只有一个实例去进行更新操作</strong></p><p>对于大数据量的初始化，可以多个异步线程分别加载一部分数据。或者是采用分片集群部署多个布隆过滤器，每一个只负责过滤自己这一部分的数据。</p></blockquote></li><li><p>基于内存手写一个限流器，传参为唯一标识和maxQPS，统计过去1s内是否触发限流（类似滑动窗口限流）</p></li><li><p>Redis和MySQL的一致性如何保证？</p></li><li><p>消息队列的选型</p><p>Kafka:超高吞吐量（十几万，基于sendfile零拷贝 + 页缓存写入 + 追加写入commit log + 分区并行实现）</p><p>RocketMQ：丰富的功能（事务消息 + 原生延迟队列） + 高吞吐量（十万）</p><p>RabbitMQ:微秒级的执行时间，比其他的毫秒级要快，但其实用户体验上微秒和毫秒没什么区别</p></li><li><p>tomcat线程池有没有了解过</p><p>参数配置：</p><ol><li><p>最小空闲线程数（类似于核心线程数）</p></li><li><p>最大线程数</p></li><li><p>线程最大空闲时间</p></li><li><p>是否预启动最小线程数（<strong>java中是由任务提交后才进行创建</strong>）</p></li><li><p>任务队列最大长度</p></li></ol><p><strong>和java线程池的区别</strong></p><p>Tomcat线程池用于处理网络请求，尽最大努力满足所有连接。在达到核心线程数后直接创建临时线程处理，达到最大线程数才会将任务放到阻塞队列，阻塞队列满后才执行拒绝策略；</p><p>Java线程池用于异步处理任务和并发编排等，尽量将任务交给核心线程去执行。在达到核心线程数后会将任务放到阻塞队列，阻塞队列满后创建临时线程处理，达到最大线程数后执行拒绝策略。</p></li><li><p>HashMap put源码有没有看过？</p></li><li><p>项目中线程池的使用</p><p>异步初始化布隆过滤器；加载节目详情</p><p>*<strong>N*cpu</strong> 表示 核心数。</p><p><strong>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 *N*cpu+1</strong></p><p><strong>如果是IO密集型任务，参考值可以设置为 2 * *N*cpu</strong></p></li><li><p>系统还可以如何去优化以应对大流量</p><ol><li><strong>进一步削峰处理：引入排队系统</strong></li></ol><p>当前系统是 Redis + Lua 原子扣库存，但面对极高并发时（比如 100 万 QPS 秒杀），Redis 本身也可能被打爆。</p><p> 🎯进阶优化：</p><ul><li>使用<strong>令牌桶机制 + 排队模型</strong>，只让前 N 个请求能进入 Redis；其余进入排队等待区，避免 Redis 被瞬间压垮；</li><li>在网关层提前做限流，如对同一IP的访问频率做限制，提前拦截恶意请求，sentinel只做兜底方案</li></ul><ol start="2"><li>引入skywalking做分布式链路id，快速定位服务，监控系统</li><li>灰度发布？</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节跳动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok失效问题</title>
      <link href="/2025/08/04/lombok-shi-xiao-wen-ti/"/>
      <url>/2025/08/04/lombok-shi-xiao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="Lombok失效问题"><a href="#Lombok失效问题" class="headerlink" title="Lombok失效问题"></a>Lombok失效问题</h3><p>在学习项目的过程中，我遇见了一个十分折磨人的问题：有时Lombok相关注解如@Data&#x2F;@Setter以及@Slf4j&#x2F;@Builder等注解会出现失效的问题，导致无法通过编译.<br>网络上能找到的原因无非这三点</p><ol><li>没有安装Lombok插件</li><li>没有启用注解处理</li><li>依赖没有引入或是依赖冲突</li></ol><p>可是我昨晚上运行项目时还能正常通过编译，为什么隔天就不行了呢？显然另有原因.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java: JPS 增量注解进程已禁用。部分重新编译的编译结果可能不准确。使用构建进程“jps.track.ap.dependencies”VM 标志启用/禁用增量注解处理环境。</span><br></pre></td></tr></table></figure><p>查看警告，尝试从这方面解决</p><p><strong>一、JPS 增量注解进程与 Lombok 的关联</strong></p><ol><li>JPS 增量注解进程的作用<br>JPS（Java Project System）是 Java 项目的编译管理进程，其 “增量注解处理” 功能的核心目的是优化编译效率：当代码发生局部修改时，仅重新编译受影响的文件，并触发相关注解处理器（如 Lombok）对修改部分进行处理，避免全量编译的耗时。</li><li>禁用后为何影响 Lombok？<br>Lombok 的工作原理是作为编译期注解处理器，在编译阶段动态生成 getter&#x2F;setter、日志对象（@Slf4j）、建造者模式代码（@Builder）等字节码。<br>当 JPS 增量注解进程被禁用时：</li></ol><p>增量编译（如 IDE 自动触发的局部编译）可能跳过 Lombok 的注解处理步骤；<br>若修改了带有 Lombok 注解的类（如新增字段、调整注解参数），旧的字节码未被更新，导致新增方法缺失、日志对象无法识别等 “失效” 现象。<br><strong>二、解决方案</strong></p><ol><li><p>清理缓存，重新构建项目（临时解决）</p></li><li><p>启用增量注解处理（彻底解决）<br>通过配置jps.track.ap.dependencies参数启用增量注解处理，确保 Lombok 在增量编译时正常工作。在路径<code>File &gt; Settings &gt; Build, Execution, Deployment &gt; Compiler &gt; Java Compiler</code>下的“Additional command line parameters” 中添加参数：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djps.track.ap.dependencies=true</span><br></pre></td></tr></table></figure><p>​同时在在<code>maven-compiler-plugin</code>中添加编译参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;compilerArgs&gt;</span><br><span class="line">&lt;arg&gt;-Djps.track.ap.dependencies=true&lt;/arg&gt;</span><br><span class="line">&lt;/compilerArgs&gt;</span><br></pre></td></tr></table></figure><p>这样启用JPS增量注解进程，确保每次修改后可以部分重新编译，确保注解生效。</p><p>笔者重新构建项目后解决了问题，然后询问AI设置了参数，暂不清楚后续还会不会出现同样的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 疑难问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言 · 对抗遗忘的花园</title>
      <link href="/2025/08/02/qian-yan/"/>
      <url>/2025/08/02/qian-yan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“时间不是一条直线，而是一片不断塌陷的沙地。”<br>—— 卡尔维诺</p></blockquote><p>在信息洪流里，我们每天都在创造、接收、遗忘。<br>而遗忘，是最安静却最彻底的暴力。<br>它不动声色地抹平昨日的情绪、闪过的念头、读过的句子、遇见的人。<br>于是，我决定开一座小小的花园——<strong>用博客，对抗遗忘</strong>。</p><h3 id="为什么要记录？"><a href="#为什么要记录？" class="headerlink" title="为什么要记录？"></a>为什么要记录？</h3><ul><li><strong>记录时间</strong>：把日子拆成一行行文字，像把花瓣压进书页，风干成永恒。</li><li><strong>保存声音</strong>：让某一刻的叹息、惊喜、疑问，在键盘上留下回声。</li><li><strong>与未来的自己相遇</strong>：当记忆模糊，这些文字会成为穿梭时光的船票。</li></ul><h3 id="这座花园里会有什么？"><a href="#这座花园里会有什么？" class="headerlink" title="这座花园里会有什么？"></a>这座花园里会有什么？</h3><ul><li>一页页 <strong>读书笔记</strong>，防止思想蒸发。  </li><li>一条条 <strong>技术备忘</strong>，让踩过的坑长出标记。  </li><li>一张张 <strong>生活切片</strong>，把平凡的今天酿成明天的琥珀。</li></ul><p>如果你也曾在深夜翻找自己一年前的想法，却只剩一片空白——<br>欢迎进来坐坐，一起把易逝的时光，种成不会枯萎的句子。</p><p><strong>愿所有流逝的，都能在此停驻。</strong><br>—— 2025.08.02</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
